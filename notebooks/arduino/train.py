# AUTOGENERATED! DO NOT EDIT! File to edit: mlflow_arduino.ipynb (unless otherwise specified).

__all__ = ['classes', 'num_classes', 'input_list', 'output_list', 'e', 'X', 'y', 'model', 'history', 'converter',
           'tflite_model', 'arduino_env', 'artifacts', 'ArduinoWrapper', 'PYTHON_VERSION', 'conda_env']

# Cell
import os
import pandas as pd
import warnings
import sys
import numpy as np
import joblib
import tensorflow as tf
import fileinput
import sklearn
from sklearn.model_selection import train_test_split
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

# Cell

classes = []

for file in os.listdir('./data'):
    if file.endswith(".csv"):
        classes.append(os.path.splitext(file)[0])

classes.sort()

num_classes = len(classes)

input_list = []
output_list = []


e=np.eye(3)
for index in range(num_classes):
    class_file = classes[index]
    df = pd.read_csv(f"./data/{class_file}.csv")
    input_list.append(df)
    #output_list.append(np.full((df.shape[0],1),index))
    output_list.append(np.full((df.shape[0],num_classes),e[index]))


X = pd.concat(input_list, axis=0).to_numpy()
y = np.vstack(output_list)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)

# Cell
model = tf.keras.Sequential([
  layers.Dense(8, activation='relu'),
  layers.Dense(5, activation='relu'),
  layers.Dense(num_classes, activation='softmax'),
])

model.compile(optimizer='adam', loss='mse', metrics=['mae','accuracy'])
history = model.fit(X_train, y_train, epochs=400, batch_size=4, validation_data=(X_val, y_val))

# Cell
loss, mae, accuracy = model.evaluate(X_test, y_test)
print("Accuracy", accuracy)
print("MAE", mae)

# Cell
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with open('model.tflite','wb') as f:
    f.write(tflite_model)

with open('model.h','w') as f:
    f.write('const unsigned char model[] = {\n')

    size=12
    l=int(len(tflite_model) / 12)
    if len(tflite_model) % 12 != 0:
        l=l+1

    for i in range(l):
        end="\n" if i == l-1 else ",\n"
        f.write('  '+', '.join([f'0x{hex(i)[2:].rjust(2, "0")}' for i in tflite_model[i*size:i*size+size]])+end)
    f.write('};\n')

arduino_env = [
    "Arduino_TensorFlowLite@2.4.0-ALPHA",
    "Arduino_APDS9960@1.0.3",
    "Arduino_HTS221@1.0.0",
    "Arduino_LPS22HB@1.0.1",
    "Arduino_LSM9DS1@1.1.0",
    "arduinoFFT@1.5.6"
]

with open('requirements.ino.txt','w') as f:
    for env in arduino_env:
        f.write(f"{env}\n")

artifacts = {
    "tfmodel": 'model.tflite',
    "model_header": "model.h",
    "requirements.ino.txt": "requirements.ino.txt",
    "artifacts": "artifacts.ino"
}

# Cell
import mlflow.pyfunc
class ArduinoWrapper(mlflow.pyfunc.PythonModel):
    def load_context(self, context): ...
    def predict(self, context, model_input): ...

# Cell
from sys import version_info
import sklearn
import cloudpickle

PYTHON_VERSION = f"{version_info.major}.{version_info.minor}.{version_info.micro}"

conda_env = {
    'channels': ['defaults'],
    'dependencies': [
        f'python={PYTHON_VERSION}',
        'pip',
        {
            'pip':[
                'mlflow',
                f'scikit-learn=={sklearn.__version__}',
                f'tensorflow=={tf.__version__}'
            ]
        }
    ],
    'name': 'serving_propensity_model'
}

# Cell
import os
os.environ['MLFLOW_TRACKING_URI']='http://mlflow:5000'

import warnings
import sys

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import ElasticNet
from urllib.parse import urlparse
import mlflow
import mlflow.sklearn
import mlflow.pyfunc

#conda_env=mlflow.pyfunc.get_default_conda_env()

with mlflow.start_run():

    #mlflow.log_param("var_smoothing", input_params['var_smoothing'])
    mlflow.log_metric("Accuracy", accuracy)
    mlflow.log_metric("MAE", mae)

    tracking_url_type_store = urlparse(mlflow.get_tracking_uri()).scheme

    if tracking_url_type_store != "file":
        mlflow.pyfunc.log_model("model",
                                 registered_model_name="arduino_model",
                                 python_model=ArduinoWrapper(),
                                 artifacts=artifacts,
                                 conda_env=conda_env)
    else:
        mlflow.pyfunc.log_model("model",
                                 path=my_model_path,
                                 python_model=ArduinoWrapper(),
                                 artifacts=artifacts,
                                 conda_env=conda_env)